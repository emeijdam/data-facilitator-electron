import { app, BrowserWindow, dialog, ipcMain, Menu, session, shell } from 'electron';
//import installExtension, { REACT_DEVELOPER_TOOLS } from 'electron-devtools-installer';
import installExtension, { REACT_DEVELOPER_TOOLS } from 'electron-devtools-assembler';
//var fs = require("fs")
//import * as fs from 'fs'
import { promises as fs } from "fs";
// import installExtension, { REACT_DEVELOPER_TOOLS } from 'electron-devtools-installer';
// eslint-disable-next-line @typescript-eslint/no-var-requires
require('@electron/remote/main').initialize()
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const reactDevToolsPath = "C:\\Users\\ed\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions\\fmkadmapgofadopljbjfkapdkoienihi\\4.28.0_0"

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 800,
    width: 1400,
    title: 'Data Streets',
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    // contextIsolation: false
      //  nodeIntegration: true 
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  //todo: add ctrl
  mainWindow.webContents.setWindowOpenHandler((details) => {
    shell.openExternal(details.url); // Open URL in user's browser.
    return { action: "deny" }; // Prevent the app from opening the URL.
  })

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();

  ipcMain.addListener('mouse', function (event, e) {
    event.returnValue = null;
    mainWindow.webContents.inspectElement(e.x, e.y);
  });


  ipcMain.on('show-context-menu', (event, e) => {
    const xRound = Math.round(e.x);
    const yRound = Math.round(e.y);

    const template: Electron.MenuItemConstructorOptions[] = [
      {
        label: 'Inspect Element',
        click: () => { event.sender.send('context-menu-command', 'menu-item-1', { x: xRound, y: yRound }) }
      },
      { type: 'separator' },
      { label: 'Menu Item 2', type: 'checkbox', checked: true }
    ]
    const menu = Menu.buildFromTemplate(template)
    const window = BrowserWindow.fromWebContents(event.sender);

    menu.popup({ window, x: xRound, y: yRound })
  })

  ipcMain.handle('dialog', async (event, method, params) => {
    const result = await dialog[method](params);
    return result;
  });

  // testing 
  ipcMain.on('set-title', (event, title) => {
    const webContents = event.sender
    const win = BrowserWindow.fromWebContents(webContents)
    win.setTitle(title)
  })

  ipcMain.handle('get-md-file',async (event, filepath: string) => {
    //console.log(filepath)
    const test = await fs.readFile(filepath, 'utf8')
    console.log(test.toString())
    return {filename: 'testme', payload: test.toString()}
    
  }
)


};


ipcMain.addListener('mouse', function (event, e) {
  event.returnValue = null;
  // mainWindow.webContents.inspectElement(e.x, e.y);
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
//app.on('ready', createWindow);

app.on('ready',  () => {
  installExtension(REACT_DEVELOPER_TOOLS)
  .then((name) => console.log(`Added Extension:  ${name}`))
  .catch((err) => console.log('An error occurred: ', err));

  console.log('creatWindow')
  createWindow()

});


// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
